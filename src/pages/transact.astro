---
import { Header, TabsEnum } from "../components/Header";
import { Select } from "../components/Select";
import { TextField } from "../components/TextField";
import { OpButton } from "../components/OpButton";
import { getCli, getBudgets, getAccounts, Transaction, saveTransaction } from "../client/fintrack";

const isPost = Astro.request.method === "POST"
const urlCookie = Astro.cookies.get("fintrackApiUrl").value
const tokenCookie = Astro.cookies.get("fintrackApiToken").value


if (urlCookie == undefined || tokenCookie == undefined) {
	console.log("red")
	return Astro.redirect("/")
}

const cli = getCli(urlCookie, tokenCookie)

if (isPost) {
	const t = await Astro.request.formData()
	const value = t.get("value")
	const accountId = t.get("accountId")
	const budgetId = t.get("budgetId")
	const description = t.get("description")
	const positive = t.get("positive")

	if (accountId && budgetId) {
		const v = value ? parseFloat(value.toString()) : 0;
		const transaction: Transaction = {
			value: v * (positive ? 1 : -1),
			accountId: accountId?.toString(),
			budgetId: budgetId.toString(),
		}

		if (description) {
			transaction.description = description.toString()
		}

		await saveTransaction(cli, transaction);
		return Astro.redirect('/transact')
	}
}

const [
	budgets,
	accounts
] = await Promise.all([
	getBudgets(cli),
	getAccounts(cli),
])
---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body class="bg-slate-100 min-h-[100dvh]">
		<Header value={TabsEnum.Transact} />
		<form class="max-w-xs mx-auto flex flex-col gap-8 mt-10" method="post">
			<TextField label="Value" name="value" placeholder="00.00" pattern="[0-9]*" inputMode="numeric" step=".01" />
			<TextField label="Description" name="description" placeholder="Description" />
			<Select label="Account" name="accountId">
				{
					accounts.map(({ id, name }) => (
						<option value={id}>{name}</option>
					))
				}
			</Select>
			<Select label="Budget" name="budgetId">
				{
					budgets.map(({ id, budget }) => (
						<option value={id}>{budget}</option>
					))
				}
			</Select>
			<div class="absolute bottom-0 left-0 w-full p-7 flex gap-5 bg-white shadow-md">
                <OpButton />
				<button id="submit" class="flex-[4] rounded-md outline-none text-md p-4 w-full bg-teal-600 text-white shadow-md">
					Transact
				</button>
			</div>
		</form>
	</body>
</html>

<script>
	const button = document.getElementById("submit") as HTMLButtonElement;

	button?.addEventListener("click", function () {
		setTimeout(() => {
			this.disabled = true;
			this.classList.add("bg-teal-800")
			this.textContent = "ðŸ’¸ ðŸ’¸ ðŸ’¸"
		}, 50)
	})

</script>